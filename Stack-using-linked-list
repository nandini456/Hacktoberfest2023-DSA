#include <stdio.h>
#include <stdlib.h>
typedef struct node{
    int data;
    struct node*next;
}node;
typedef struct stack{
    node * top;
}stack;
void push(stack** );
void pop(stack** );
void top(stack** );
int isEmpty(stack* );
void display(stack *);
int main()
{
    int n,cap;
    stack* s1=(stack*)malloc(sizeof(stack));
    if(!s1)
    {
        printf("Memory allocation failed\n");
        return 0;
    }
    s1->top=NULL;
    char ch;
    
    do{
        printf("********MENU********\n");
        printf("1.PUSH\n2.POP\n3.TOP\n4.DISPLAY\n");
        scanf("%d",&n);
        switch(n)
        {
            case 1:
            {
                push(&s1);
                break;
            }
            case 2:
            {
                pop(&s1);
                break;
            }
            case 3:
            {
                top(&s1);
                break;
            }
            case 4:
            {
                display(s1);
                break;
            }
        }
        printf("Do u want to continue....enter y\n");
        scanf(" %c",&ch);
    }while(ch=='y'||ch=='Y');

}
void push(stack** s1)
{
    int data;
    printf("Enter the data : ");
    scanf("%d",&data);
    node* temp=(node*)malloc(sizeof(node));
    if(!temp)
    {
        printf("Memory alloaction failes\n");
        return;
    }
    temp->data=data;

    temp->next=(*s1)->top;
    (*s1)->top=temp;
}
void pop(stack** s1)
{
    if(isEmpty(*s1))
    {
        printf("Stack empty\n");
        return;
    }
    node* temp=(*s1)->top;
    printf("Popped element is : %d\n",temp->data);
    (*s1)->top=temp->next;
    free(temp);
}
void top(stack** s1)
{
    if(isEmpty(*s1))
    {
        printf("Stack empty\n");
        return;
    }
    printf("The element at top is : %d\n",(*s1)->top->data);

}
int isEmpty(stack* s1)
{
    if(!(s1->top))
    return 1;
    return 0;

}
void display(stack *s1)
{
    if(!s1->top)
    return;
    printf("%d->",s1->top->data);
    s1->top=s1->top->next;
    display(s1);
}
